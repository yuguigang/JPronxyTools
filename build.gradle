plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.26.0'//打包插件
}

group 'com.ztoncloud'
version '1.0.0'//这里要注意，如果不是数字版本号Jlink打包会失败！

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.7.1'
    nettyVersion = '4.1.90.Final'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

javafx {
    version = '19.0.2.1'
    modules = ['javafx.controls', 'javafx.fxml']
}

application {
    applicationName = "JProxyTools"
    mainModule.set("jproxytools")
    mainClass.set("com.ztoncloud.jproxytools.Launcher")
    //mainClass.set("com.ztoncloud.jproxytools.Launcher")
    applicationDefaultJvmArgs = [
            //垃圾收集器,SDK 14以上可用，Java16的ZGC似乎有大幅度优化
            "-XX:+UseZGC",
            // 当遇到空指针异常时显示更详细的信息
            "-XX:+ShowCodeDetailsInExceptionMessages",
            "-Dsun.java2d.opengl=true",
            // 不添加此参数，打包成exe后，https协议的网络图片资源无法加载
            "-Dhttps.protocols=TLSv1.1,TLSv1.2"
    ]
}

dependencies {

    //logback-classic包含logback-core和slf4j-api依赖
    implementation 'ch.qos.logback:logback-classic:1.4.6'
    //字体图标库ikonli
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-feather-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-material2-pack:12.3.1'

    //Gson
    implementation('com.google.code.gson:gson:2.10.1')
    //atlantafx主题库
    implementation("io.github.mkpaz:atlantafx-base:1.2.0")
    //注解库
    implementation 'org.jetbrains:annotations:24.0.1'

    //commons-lang3工具
    implementation 'org.apache.commons:commons-lang3:3.12.0'

    //fasterxml核心库，包含jackson-core jackson-annotations jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    //fasterxml解析properties、xml和yaml的模块
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-properties:2.14.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.14.2'
    //implementation 'com.fasterxml.jackson.module:jackson-module-jakarta-xmlbind-annotations:2.14.1'

    //netty依赖,这里注意：JDK 9模块化配置如果依赖ALL会错误，得分包依赖。
    implementation("io.netty:netty-buffer:${nettyVersion}")
    implementation("io.netty:netty-handler:${nettyVersion}")

    implementation("io.netty:netty-codec:${nettyVersion}")
    implementation("io.netty:netty-transport:${nettyVersion}")
    implementation("io.netty:netty-handler-proxy:${nettyVersion}")
    implementation("io.netty:netty-codec-http:${nettyVersion}")
    implementation("io.netty:netty-codec-http2:${nettyVersion}")
    implementation("io.netty:netty-codec-socks:${nettyVersion}")

    implementation("io.netty:netty-transport-native-epoll:${nettyVersion}")//Linux
    implementation("io.netty:netty-transport-native-kqueue:${nettyVersion}")//MacOSX
    //强大的ip地址解析库，https://github.com/seancfoley/IPAddress
    implementation("com.github.seancfoley:ipaddress:5.4.0")

    //TEMP
    implementation 'io.projectreactor:reactor-core:3.4.24'


    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

ext.sharedManifest = manifest {
    attributes("Main-Class":"com.ztoncloud.jproxytools.Launcher")
}

tasks.register('uberJar', Jar) {
    archiveClassifier = 'uber'
    manifest = project.manifest {
        from sharedManifest
    }
    from sourceSets.main.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

jlink {
    //合并模块，这些是非模块
    mergedModule {
        requires 'java.naming'
        requires 'java.xml'
    }
    options.set(List.of("--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages"))

    launcher {
        name = application.applicationName
        imageName.set(application.applicationName)
        //jvmArgs = ['-Dlogback.configurationFile=./logback.xml']
    }

    imageZip.set(project.file("${project.buildDir}/image-zip/JProxyTools.zip"))

    jpackage {
        outputDir = "build-package"
        imageName = application.applicationName
        skipInstaller = false
        installerName = application.applicationName
        appVersion = version.toString()

        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            icon = "src/main/resources/assets/icons/application.ico"
            installerOptions += ["--win-dir-chooser", "--win-menu", "--win-shortcut", "--win-menu-group", application.applicationName]
        }
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            icon = "src/main/resources/assets/icons/application.icns"
        }
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            icon = "src/main/resources/assets/icons/application.png"
            installerType = "deb"
            installerOptions += ["--linux-deb-maintainer", "icuxika@outlook.com", "--linux-menu-group", application.applicationName, "--linux-shortcut"]
        }
    }
}

task printDependentJarsList {
    // 打印出项目所依赖的jar包路径集合并使用 ; 拼接
    // projectJarPath: 当前项目 gradle jar 制作出来的 jar
    // dependentJarsPath: 项目依赖的第三方 jar 集合
    // 使用：jpackage -p "${projectJarPath};${dependentJarsPath}"

    println("----------")
    println(configurations.getByName("runtimeClasspath").files.join(";"))
    println("----------")
}

task copyDependencies(type: Copy) {
    from(configurations.getByName("runtimeClasspath"))
    into("$buildDir/modules")
}

// 打包 -> EXE镜像（build/package/image）
task package2Image(type: Exec) {
    dependsOn("build", copyDependencies)

    def iconPath = "$projectDir/src/main/resources/assets/icons/application.ico"
    if (org.gradle.internal.os.OperatingSystem.current().windows) {
        iconPath = "$projectDir/src/main/resources/assets/icons/application.ico"
    } else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
        iconPath = "$projectDir/src/main/resources/assets/icons/application.icns"
    } else if (org.gradle.internal.os.OperatingSystem.current().linux) {
        iconPath = "$projectDir/src/main/resources/assets/icons/application.png"
    }

    commandLine("jpackage")
    args(
            "-n", application.applicationName,
            "-t", "app-image",//设置打包Type为app-image
            "--java-options", application.applicationDefaultJvmArgs.join(" "),
            "-p", "$buildDir/modules" + File.pathSeparator + "$buildDir/libs",
            "-d", "$buildDir/package/image",
            "-m", "${application.mainModule.get()}/${application.mainClass.get()}",
            "--icon", "${iconPath}",
            "--app-version", "$version"
    )
}

// 打包 -> MSI安装包（build/package/installer）
task package2Installer(type: Exec) {
    dependsOn("build", copyDependencies)

    def installerType = "msi"
    def iconPath = "$projectDir/src/main/resources/assets/icons/application.ico"
    if (org.gradle.internal.os.OperatingSystem.current().windows) {
        installerType = "msi"
        iconPath = "$projectDir/src/main/resources/assets/icons/application.ico"
    } else if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
        installerType = "dmg"
        iconPath = "$projectDir/src/main/resources/assets/icons/application.icns"
    } else if (org.gradle.internal.os.OperatingSystem.current().linux) {
        installerType = "deb"
        iconPath = "$projectDir/src/main/resources/assets/icons/application.png"
    }

    def argsList = [
            "-n", application.applicationName,
            "-t", "${installerType}",
            "--java-options", application.applicationDefaultJvmArgs.join(" "),
            "-p", "$buildDir/modules" + File.pathSeparator + "$buildDir/libs",
            "-d", "$buildDir/package/installer",
            "-m", "${application.mainModule.get()}/${application.mainClass.get()}",
            "--icon", "${iconPath}",
            "--app-version", "$version"
    ]

    def winInstallerOptionList = [
            "--win-dir-chooser",
            "--win-menu",
            "--win-shortcut",
            "--win-menu-group",
            "${application.applicationName}"
    ]

    def linuxInstallerOptionList = [
            "--linux-deb-maintainer",
            "icuxika@outlook.com",
            "--linux-menu-group",
            "${application.applicationName}",
            "--linux-shortcut"
    ]

    if (org.gradle.internal.os.OperatingSystem.current().windows) {
        argsList.addAll(winInstallerOptionList)
    } else if (org.gradle.internal.os.OperatingSystem.current().linux) {
        argsList.addAll(linuxInstallerOptionList)
    }

    commandLine("jpackage")
    args(argsList)
}

